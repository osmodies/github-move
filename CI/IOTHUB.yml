# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
   include: 
    - master2
  paths:
    exclude: 
      - CI
variables:
  - group: IotExample
  - group: keyvaultepm

stages:

- stage: DeployIaCIOT
  displayName: Deploy IaC IOT
  condition: eq(variables['DeleteIAC'], 'No')
  jobs:
  - deployment: DeployIaCIOTJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV-stpc'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true
            enabled: true

          - task: TerraformInstaller@0
            displayName: 'terraform installer'
            inputs:
              terraformVersion: '0.13.5'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendServiceArm: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount)'
              backendAzureRmContainerName: '$(var.terraformContainername)'
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform : apply -auto-approve'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              commandOptions: '-auto-approve'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount) '
              backendAzureRmContainerName: $(var.terraformContainername)
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true

- stage: Installmachine
  displayName: 'Install Machine Components'
  dependsOn: DeployIaCIOT
#  variables:
#    SSH_PUBLIC_KEY: $[ stageDependencies.DeployIaCIOT.DeployIaCIOTJob.outputs['GeneratedSSHKEY.SSH_PUBLIC_KEY'] ]
#    SSH_PRIVATE_KEY: $[ stageDependencies.DeployIaCIOT.DeployIaCIOTJob.outputs['GeneratedSSHKEY.SSH_PRIVATE_KEY'] ]
  jobs:
  - deployment: deployJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV2'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: SSH@0
            displayName: 'Install Prerequisites'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                releasever="/etc/yum/vars/releasever"
                if [d- "$releasever"]
                then
                sudo rm /etc/yum/vars/releasever 
                fi
                sudo yum --disablerepo='*' remove 'rhui-azure-rhel7-eus' -y
                sudo yum --config='https://rhelimage.blob.core.windows.net/repositories/rhui-microsoft-azure-rhel7.config' install 'rhui-azure-rhel7' -y
                sudo yum install container-selinux -y
                sudo yum install dnf
              failOnStdErr: false
              interactiveSession: true
              readyTimeout: '20000'

          - task: SSH@0
            displayName: 'Package donwload'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                mkdir package-iot
                cd package-iot
                wget https://packages.microsoft.com/centos/7/prod/moby-cli-3.0.10%2Bazure-0.x86_64.rpm
                wget https://packages.microsoft.com/centos/7/prod/moby -engine-3.0.10% 2Bazure-0.x86_64.rpm
                wget https://github.com/Azure/azure-iotedge/releases/download/1.0.9/libiothsm-std_1.0.9-1.el7.x86_64.rpm
                wget https://github.com/Azure/azure-iotedge/releases/download/1.0.9/iotedge-1.0.9-1.el7.x86_64.rpm
                ls
              failOnStdErr: false
              interactiveSession: true
              readyTimeout: '20000'

          - task: SSH@0
            displayName: 'install compat-openssl10'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo dnf install compat-openssl10
              failOnStdErr: false
              interactiveSession: true
              readyTimeout: '20000'
          - task: SSH@0
            displayName: 'install moby-cli-3.0.10+azure-0.x86_64'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo yum install moby-cli-3.0.10+azure-0.x86_64.rpm
              failOnStdErr: false
              interactiveSession: true
              readyTimeout: '20000'
          
          - task: SSH@0
            displayName: 'install moby-engine-3.0.10+azure-0.x86_64'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo yum install moby-engine-3.0.10+azure-0.x86_64.rpm
              failOnStdErr: false
              interactiveSession: true
              readyTimeout: '20000'
          - task: SSH@0
            displayName: 'rpm -Uhv libiothsm-std_1.0.9-1.el7'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo rpm -Uhv libiothsm-std_1.0.9-1.el7.x86_64.rpm
              failOnStdErr: true
              interactiveSession: true
              readyTimeout: '20000'
          
          - task: SSH@0
            displayName: 'rpm -Uhv iotedge-1.0.9-1.el7.x86_64'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo rpm -Uhv iotedge-1.0.9-1.el7.x86_64.rpm
              failOnStdErr: true
              interactiveSession: true
              readyTimeout: '20000'

          - task: SSH@0
            displayName: 'Restart IotEdge'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo systemctl restart iotedge
                  sudo systemctl status iotedge
              failOnStdErr: true
              interactiveSession: true
              readyTimeout: '20000'

- stage: DeleteIACIOT
  displayName: 'DeleteIACIOT'
  condition: eq(variables['DeleteIAC'], 'Yes')
  jobs:
  - deployment: deploydeleteiotiacJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV-stpc-Delete'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true

          - task: TerraformInstaller@0
            displayName: 'terraform installer'
            inputs:
              terraformVersion: '0.13.5'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendServiceArm: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount)'
              backendAzureRmContainerName: '$(var.terraformContainername)'
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform destroy'
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
            enabled: true