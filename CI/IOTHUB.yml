# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
   include: 
    - master2
  paths:
    exclude: 
      - CI
variables:
  - group: IotExample
  - group: keyvaultepm

stages:

- stage: DeployIaCIOT
  displayName: Deploy IaC IOT
  condition: eq(variables['DeleteIAC'], 'No')
  jobs:
  - deployment: DeployIaCIOTJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV-stpc'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true
            enabled: true

          - task: TerraformInstaller@0
            displayName: 'terraform installer'
            inputs:
              terraformVersion: '0.13.5'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendServiceArm: '$(var.serviceconnection2)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount)'
              backendAzureRmContainerName: '$(var.terraformContainername)'
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: '$(var.serviceconnection2)'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform : apply -auto-approve'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              commandOptions: '-auto-approve'
              environmentServiceNameAzureRM: '$(var.serviceconnection2)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount) '
              backendAzureRmContainerName: $(var.terraformContainername)
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true

- stage: Installmachine
  displayName: 'Install Machine Components'
  dependsOn: DeployIaCIOT
  jobs:
  - deployment: deployJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV2'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: SSH@0
            displayName: 'Subscribe machine redhat'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                sudo subscription-manager register --username $(redhatuser) --password $(redhatpassword) --auto-attach --force
                sudo subscription-manager repos --enable rhel-7-server-optional-rpms --enable rhel-7-server-extras-rpms --enable rhel-7-server-rpms
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: false

          - task: SSH@0
            displayName: 'Install Prerequisites rhel7'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                sudo rm /etc/yum/vars/releasever
                sudo yum --disablerepo='*' remove 'rhui-azure-rhel7-eus' -y
                sudo yum --config='https://rhelimage.blob.core.windows.net/repositories/rhui-microsoft-azure-rhel7.config' install 'rhui-azure-rhel7' -y
                sudo yum install container-selinux -y
                sudo yum install dnf -y
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true

          - task: SSH@0
            displayName: 'Package donwload'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                mkdir package-iot
                cd package-iot
                wget https://packages.microsoft.com/centos/7/prod/moby-cli-3.0.10%2Bazure-0.x86_64.rpm
                wget https://packages.microsoft.com/centos/7/prod/moby-engine-3.0.10%2Bazure-0.x86_64.rpm
                wget https://github.com/Azure/azure-iotedge/releases/download/1.0.9/libiothsm-std_1.0.9-1.el7.x86_64.rpm
                wget https://github.com/Azure/azure-iotedge/releases/download/1.0.9/iotedge-1.0.9-1.el7.x86_64.rpm
                ls
              failOnStdErr: false
              interactiveSession: true
              readyTimeout: '20000'
            enabled: true
          - task: SSH@0
            displayName: 'install moby-cli-3.0.10+azure-0.x86_64'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  if  rpm -q moby-cli
                  then
                  echo "installed moby-cli-3.0.10+azure-0.x86_64.rpm"
                  else
                  sudo yum install moby-cli-3.0.10+azure-0.x86_64.rpm -y 
                  fi
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          
          - task: SSH@0
            displayName: 'install moby-engine-3.0.10+azure-0.x86_64' 
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  if  rpm -q moby-engine
                  then
                  echo "installed moby-engine-3.0.10+azure-0.x86_64.rpm"
                  else
                  sudo yum install moby-engine-3.0.10+azure-0.x86_64.rpm -y
                  fi
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          - task: SSH@0
            displayName: 'rpm -Uhv libiothsm-std_1.0.9-1.el7'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  if  rpm -q libiothsm-std
                  then
                  echo "installed libiothsm-std_1.0.9-1.el7.x86_64.rpm"
                  else
                  sudo rpm -Uhv libiothsm-std_1.0.9-1.el7.x86_64.rpm
                  fi
              failOnStdErr: true
              readyTimeout: '20000'
            enabled: true
          
          - task: SSH@0
            displayName: 'rpm -Uhv iotedge-1.0.9-1.el7.x86_64'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  if  rpm -q iotedge
                  then
                  echo "installed iotedge-1.0.9-1.el7.x86_64.rpm"
                  else
                  sudo rpm -Uhv iotedge-1.0.9-1.el7.x86_64.rpm
                  fi
              failOnStdErr: true
              readyTimeout: '20000'
            enabled: true
           
          - task: AzureCLI@2
            displayName: 'Create IOT Device'
            inputs:
              azureSubscription: '$(var.serviceconnection2)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az config set extension.use_dynamic_install=yes_without_prompt
                az extension add --upgrade -n azure-iot
                az iot hub device-identity create --device-id $(var.iotedgedevicename) --edge-enabled --hub-name $(var.resourceiothubname)
                ConnectionString="$(az iot hub device-identity connection-string show --device-id $(var.iotedgedevicename) --hub-name $(var.resourceiothubname) -o tsv)"
                echo "$ConnectionString"
                echo "##vso[task.setvariable variable=ConnectionStringIotEdge]$ConnectionString"
            enabled: true
          - task: SSH@0
            displayName: 'Replace Connection String Config Yaml'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  sudo mkdir -p /home/adminiotedge/storageedgehub
                  echo "$(ConnectionStringIotEdge)"
                  sudo sed -i 's|"<ADD DEVICE CONNECTION STRING HERE>"|"$(ConnectionStringIotEdge)"|g' /etc/iotedge/config.yaml
                  sudo sed -i 's|  env: {}|  env:\
                  \    storageFolder: "/home/adminiotedge/storageedgehub"|g' /etc/iotedge/config.yaml
              failOnStdErr: true
              readyTimeout: '20000'
            enabled: true

          - task: SSH@0
            displayName: 'Restart IotEdge'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd package-iot
                  sudo systemctl restart iotedge
                  sudo systemctl status iotedge
              failOnStdErr: true
              readyTimeout: '20000'
            enabled: true

          - task: AzureCLI@2
            displayName: 'IOT Set module simulated-temperature-sensor'
            inputs:
              azureSubscription: '$(var.serviceconnection2)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az iot edge set-modules --device-id $(var.iotedgedevicename) --hub-name $(var.resourceiothubname) --content "$(System.DefaultWorkingDirectory)/IOTHUB/azureiotedge-simulated-temperature-sensor.json"
                az iot hub module-identity list --device-id $(var.iotedgedevicename) --hub-name $(var.resourceiothubname)
            enabled: true
          
          - task: SSH@0
            displayName: 'Firewall'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |          
                  sudo firewall-cmd --zone=public --add-port=5671/tcp --permanent
                  sudo firewall-cmd --zone=public --add-port=8883/tcp --permanent
                  sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          
          - task: SSH@0
            displayName: 'Donwloads file for Generate Certificates'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |          
                  sudo mkdir -p  epmcert
                  cd epmcert
                  sudo curl https://raw.githubusercontent.com/Azure/iotedge/master/tools/CACertificates/certGen.sh --output certGen.sh
                  sudo curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_device_intermediate_ca.cnf --output openssl_device_intermediate_ca.cnf
                  sudo curl https://raw.githubusercontent.com/Azure/iotedge/master/tools/CACertificates/openssl_root_ca.cnf --output openssl_root_ca.cnf
                  sudo chmod 700 certGen.sh
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
         
          - task: SSH@0
            displayName: 'CERTIFICATE ROOT CA'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                cd epmcert
                sudo sed -i "s/1234/$(sshpassphrase)/g" certGen.sh
                sudo sed -i "s/false/true/g" certGen.sh
                sudo ./certGen.sh create_root_and_intermediate
              failOnStdErr: false
              interactiveSession: false
              readyTimeout: '20000'
            enabled: true
          - task: SSH@0
            displayName: 'CERTIFICATE COMUNICATION ENCRYPT BETWEEN MODULES'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |          
                  cd epmcert
                  sudo ./certGen.sh create_edge_device_ca_certificate "$(var.resourcevmname)"
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          - task: SSH@0
            displayName: 'CERTIFICATE IDENTITY FOR DPS CONFIGURATION'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |          
                  cd epmcert
                  sudo ./certGen.sh create_edge_device_identity_certificate "$(var.resourcevmname)"
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          
          - task: SSH@0
            displayName: 'Configure IOTEDGE wint Self-Signed certificates'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  cd epmcert
                  sudo mkdir -p /etc/iotedge/epmcerts
                  sudo cp ~/epmcert/certs/azure-iot-test-only.root.ca.cert.pem /etc/iotedge/epmcerts/
                  sudo cp ~/epmcert/certs/iot-edge-device-ca-$(var.resourcevmname)-full-chain.cert.pem /etc/iotedge/epmcerts/
                  sudo cp ~/epmcert/certs/iot-edge-device-identity-$(var.resourcevmname).cert.pem /etc/iotedge/epmcerts/
                  sudo cp ~/epmcert/private/iot-edge-device-ca-$(var.resourcevmname).key.pem /etc/iotedge/epmcerts/
                  sudo cp ~/epmcert/certs/iot-edge-device-identity-$(var.resourcevmname)-full-chain.cert.pem /etc/iotedge/epmcerts/
                  sudo cp ~/epmcert/private/iot-edge-device-identity-$(var.resourcevmname).key.pem /etc/iotedge/epmcerts/
              failOnStdErr: true
              readyTimeout: '20000'
            enabled: true

          - task: SSH@0
            displayName: 'Configure IOTEDGE config.yml'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  device_ca_cert="file:///etc/iotedge/epmcerts/iot-edge-device-ca-$(var.resourcevmname)-full-chain.cert.pem"
                  device_ca_pk="file:///etc/iotedge/epmcerts/iot-edge-device-ca-$(var.resourcevmname).key.pem"
                  trusted_ca_certs="file:///etc/iotedge/epmcerts/azure-iot-test-only.root.ca.cert.pem"
                  sudo sed -i "s/# certificates:/certificates:/g" /etc/iotedge/config.yaml
                  echo "$device_ca_cert"
                  sudo sed -i "s/#   device_ca_cert:/  device_ca_cert:/g" /etc/iotedge/config.yaml
                  echo "device_ca_cert1"
                  sudo sed -i 's|device_ca_cert: "<ADD URI TO DEVICE CA CERTIFICATE HERE>"|device_ca_cert: "file:///etc/iotedge/epmcerts/iot-edge-device-ca-$(var.resourcevmname)-full-chain.cert.pem"|g' /etc/iotedge/config.yaml
                  echo "$device_ca_pk"
                  sudo sed -i "s/#   device_ca_pk:/  device_ca_pk:/g" /etc/iotedge/config.yaml
                  echo "device_ca_pk 1"
                  sudo sed -i 's|device_ca_pk: "<ADD URI TO DEVICE CA PRIVATE KEY HERE>"|device_ca_pk: "file:///etc/iotedge/epmcerts/iot-edge-device-ca-$(var.resourcevmname).key.pem"|g' /etc/iotedge/config.yaml
                  echo "$trusted_ca_certs"
                  sudo sed -i "s/#   trusted_ca_certs:/  trusted_ca_certs:/g" /etc/iotedge/config.yaml
                  echo "trusted_ca_certs 2"
                  sudo sed -i 's|trusted_ca_certs: "<ADD URI TO TRUSTED CA CERTIFICATES HERE>"|trusted_ca_certs: "file:///etc/iotedge/epmcerts/azure-iot-test-only.root.ca.cert.pem"|g' /etc/iotedge/config.yaml
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          
          - task: SSH@0
            displayName: 'Restart IotEdge'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  sudo systemctl restart iotedge
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true

          - task: SSH@0
            displayName: 'IotEdge Check'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  sudo iotedge check
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: false

          - task: AzureCLI@2
            displayName: 'Add Link iothub to DPS'
            inputs:
              azureSubscription: '$(var.serviceconnection2)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az config set extension.use_dynamic_install=yes_without_prompt
                az extension add --upgrade -n azure-iot
                iothubconnectionstring=$(az iot hub connection-string show -n $(var.resourceiothubname) -o tsv)
                az iot dps linked-hub create --dps-name $(var.resourceiotdps) --resource-group $(var.resourcegroupname) --connection-string "$iothubconnectionstring" --location $(var.resourcegroupnamelocation)
                idscopedps=$(az iot dps show --name $(var.resourceiotdps) --resource-group "$(var.resourcegroupname)" --query properties.idScope -o tsv)
                echo "##vso[task.setvariable variable=idscopedps]$idscopedps"
            enabled: true
          
          - task: SSH@0
            displayName: 'Configure IOTEDGE config.yml With Info DPS '
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                  sudo sed -i '/#     identity_pk: "<REQUIRED URI TO DEVICE IDENTITY PRIVATE KEY>"/ a\provisioning:\
                  \   source: "dps"\
                  \   global_endpoint: "https://global.azure-devices-provisioning.net"\
                  \   scope_id: "$(idscopedps)"\
                  \   attestation:\
                  \     method: "x509"\
                  \     identity_cert: "file:///etc/iotedge/epmcerts/iot-edge-device-identity-$(var.resourcevmname)-full-chain.cert.pem"\
                  \     identity_pk: "file:///etc/iotedge/epmcerts/iot-edge-device-identity-$(var.resourcevmname).key.pem"' /etc/iotedge/config.yaml
                  sudo systemctl restart iotedge
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          - task: DownloadSecureFile@1
            name: 'iotedgedeviceidentitycert'
            inputs:
              secureFile: 'iot-edge-device-identity-machinestpcepm.cert.pem'
          - task: PowerShell@2
            displayName: 'Copia de certificado a agente'
            inputs:
              targetType: 'inline'
              script: 'scp $(var.resourcevmadminuser)@$(var.resourcevmipprivate):~/epmcert/certs/iot-edge-device-identity-$(var.resourcevmname).cert.pem $(System.DefaultWorkingDirectory)'
            enabled: false
          - task: AzureCLI@2
            displayName: 'Add Individual Enrollment '
            inputs:
              azureSubscription: '$(var.serviceconnection2)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                  az config set extension.use_dynamic_install=yes_without_prompt
                  az extension add --upgrade -n azure-iot
                  az iot dps enrollment create -g $(var.resourcegroupname) --dps-name $(var.resourceiotdps) \
                  --enrollment-id $(var.enrollment_id) --attestation-type x509  --certificate-path $(iotedgedeviceidentitycert.secureFilePath) \
                  --iot-hub-host-name "$(var.resourceiothubname).azure-devices.net" --device-id "$(var.resourceiothubname)" 
            enabled: true

- stage: DeleteIACIOT
  displayName: 'DeleteIACIOT'
  condition: eq(variables['DeleteIAC'], 'Yes')
  jobs:
  - deployment: deploydeleteiotiacJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV-stpc-Delete'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: SSH@0
            displayName: 'UnSubscribe machine redhat'
            inputs:
              sshEndpoint: 'vmiotedge'
              runOptions: 'inline'
              inline: |
                sudo subscription-manager remove --all
                sudo subscription-manager unregister
                sudo subscription-manager clean
                sudo yum clean all
                sudo rm -rf /var/cache/yum/
              failOnStdErr: false
              readyTimeout: '20000'
            enabled: true
          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true

          - task: TerraformInstaller@0
            displayName: 'terraform installer'
            inputs:
              terraformVersion: '0.13.5'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendServiceArm: '$(var.serviceconnection2)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount)'
              backendAzureRmContainerName: '$(var.terraformContainername)'
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: '$(var.serviceconnection2)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform destroy'
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: '$(var.serviceconnection2)'
            enabled: true