# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
   include: 
    - master2
  paths:
    exclude: 
      - CI
variables:
  - group: IotExample
  - group: keyvaultepm

stages:

- stage: DeployIaCIOT
  displayName: Deploy IaC IOT
  condition: eq(variables['DeleteIAC'], 'No')
  jobs:
  - deployment: DeployIaCIOTJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV-stpc'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: Bash@3
            displayName: 'Generate SSHKEY'
            inputs:
              targetType: 'inline'
              script: |
                ssh-keygen \
                -t rsa \
                -b 4096 \
                -C "$(var.sshcomment)" \
                -f $(var.ssfilename) \
                -N "$(sshpassphrase)"
          
          - task: Bash@3
            displayName: 'Publish SSHKEY in KeyVault'
            inputs:
              targetType: 'inline'
              script: |
                az keyvault secret set –vault-name $(var.keyvaultname) –name $(var.keyvaultsecretnameprivate) –file $(var.keyvaultsecretfileprivate) –encoding ascii
                az keyvault secret set –vault-name $(var.keyvaultname) –name $(var.keyvaultsecretnamepublic) –file $(var.keyvaultsecretfilepublic) –encoding ascii

          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true
            enabled: false

          - task: TerraformInstaller@0
            displayName: 'terraform installer'
            inputs:
              terraformVersion: '0.13.5'
            enabled: false

          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendServiceArm: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount)'
              backendAzureRmContainerName: '$(var.terraformContainername)'
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: false


          - task: TerraformTaskV1@0
            displayName: 'Terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
            enabled: false

          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
            enabled: false

          - task: TerraformTaskV1@0
            displayName: 'Terraform : apply -auto-approve'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              commandOptions: '-auto-approve'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount) '
              backendAzureRmContainerName: $(var.terraformContainername)
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: false

- stage: Installmachine
  displayName: 'Install Machine Components'
  #dependsOn: DeployIaCIOT
  jobs:
  - deployment: deployJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV2'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                 ssh -t -t -i ~/.ssh/id_rsa.pub $(var.resourcevmadminuser)@$(var.ipvmlinux)
#                echo "$(var.resourcevmadminpassword)" | ssh -t -t -p 22 "$(var.resourcevmadminuser)@$(var.ipvmlinux)"


- stage: DeleteIACIOT
  displayName: 'DeleteIACIOT'
  condition: eq(variables['DeleteIAC'], 'Yes')
  jobs:
  - deployment: deploydeleteiotiacJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'IOT-DEV-stpc-Delete'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true

          - task: TerraformInstaller@0
            displayName: 'terraform installer'
            inputs:
              terraformVersion: '0.13.5'
            enabled: true

          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendServiceArm: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
              backendAzureRmResourceGroupName: '$(var.terraformstoragerg)'
              backendAzureRmStorageAccountName: '$(var.terraformstorageaccount)'
              backendAzureRmContainerName: '$(var.terraformContainername)'
              backendAzureRmKey: '$(var.terraformstoragekey)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
            enabled: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform destroy'
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceNameAzureRM: 'VS Ent-MPN- ODIAZ (972e401d-226e-48c7-a463-6d562c39edda)'
            enabled: true